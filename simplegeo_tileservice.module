<?php
// $Id$

/**
 * @file
 * Services support for Simple Geo data.
 *
 * Contains code and concepts from Mika Tuupola's blog post "Introduction to
 * Marker Clustering With Google Maps" http://www.appelsiini.net/2008/11/introduction-to-marker-clustering-with-google-maps
 *
 * The gmaptile.php comes from http://mapki.com/wiki/GMapTile and it needs to
 * be updated as it uses the old 17-0 zoom levels instead of 0-17.
 */

/*
 * Specifying layer properties.
 * Avaiable settings:
 *  nodetype  String. the node type name. Requeried
 *  title     String. Pretty title of the layer. Use t(). Required.
 *  checked   Binary. Whether the layer should be on be default.
 *  max_age   String. Specifies the maximum age of the node from the created
 *            date. E.g "2 days". Parsed with strtottime().
 *  joins     Array. Any extra JOINS that should be added to the query in
 *            _simplegeo_tileservice_get_nodes()
 *            E.g array('INNER JOIN {content_type_event} t ON n.vid = t.vid', ..., ...)
 *  wheres    Array. Any extra extra WHERE statements that should be added to
 *            the query in _simplegeo_tileservice_get_nodes(). Don't include
 *            "AND".
*/

/**
 * Returns the named layer or NULL if the layer
 * doesn't exist.
 *
 * @param string $name
 * @return array
 */
function simplegeo_tileservice_get_layer($name) {
  $layer = NULL;
  $layers = simplegeo_tileservice_get_layers();
  if (isset($layers[$name])) {
    $layer = $layers[$name];
  }
  return $layer;
}

/**
 * Returns all the layers in the tile service.
 *
 * @return array
 */
function simplegeo_tileservice_get_layers() {
  static $layers;
  $cache = !isset($layers);
  $cache_key = 'simplegeo_tileservice:layers';

  if (!$layers && ($cache = cache_get($cache_key)) && isset($cache->data)) {
    $cache = FALSE;
    $layers = $cache->data;
  }

  if (!$layers) {
    $layers = module_invoke_all('simplegeo_tileservice_layers');
    drupal_alter('simplegeo_tileservice_layers', $layers);

    // Get rid of layers with invalid types
    $types = simplegeo_tileservice_get_layer_types();
    foreach ($layers as $name => $def) {
      if (!isset($def['type']) || !isset($types[$def['type']])) {
        unset($types[$name]);
      }
    }
  }

  if ($cache) {
    cache_set($cache_key, $layers);
  }

  return $layers;
}

/**
 * Returns the named layer type or NULL if the layer type
 * doesn't exist.
 *
 * @param string $name
 * @return array
 */
function simplegeo_tileservice_get_layer_type($name) {
  $type = NULL;
  $types = simplegeo_tileservice_get_layer_types();
  if (isset($types[$name])) {
    $type = $types[$name];
  }
  return $type;
}

/**
 * Returns all the layer types for the tile service.
 *
 * @return array
 */
function simplegeo_tileservice_get_layer_types() {
  static $types;
  $cache = !isset($types);
  $cache_key = 'simplegeo_tileservice:types';

  if (!$types && ($cache = cache_get($cache_key)) && isset($cache->data)) {
    $cache = FALSE;
    $types = $cache->data;
  }

  if (!$types) {
    $types = module_invoke_all('simplegeo_tileservice_layer_types');
    drupal_alter('simplegeo_tileservice_layer_types', $types);
  }

  if ($cache) {
    cache_set($cache_key, $types);
  }

  return $types;
}

/**
 * Implementation of hook_simplegeo_tileservice_layer_types().
 *
 * @return void
 */
function simplegeo_tileservice_simplegeo_tileservice_layers() {
  return array(
    'nodes' => array(
      'type' => 'node_sql',
      'title' => t('Nodes'),
      'active' => TRUE,
    ),
  );
}

/**
 * Implementation of hook_simplegeo_tileservice_layers().
 *
 * @return void
 */
function simplegeo_tileservice_simplegeo_tileservice_layer_types() {
  return array(
    'node_sql' => array(
      'callback' => '_simplegeo_tileservice_get_nodes',
    ),
  );
}

/**
 * Implementation of hook_services_resources().
 */
function simplegeo_tileservice_services_resources() {
  return array(
    'simple-geo-layer' => array(
      'index' => array(
        'file' => array('module' => 'simplegeo_tileservice', 'file' => 'inc'),
        'callback' => '_simplegeo_tileservice_index',
        'args' => array(
          array(
            'name' => 'z',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'The zoom level for the tile.',
            'default value' => 0,
            'source' => array('param' => 'z'),
          ),
          array(
            'name' => 'x',
            'type' => 'int',
            'description' => 'The x-index of the tile.',
            'default value' => 0,
            'source' => array('param' => 'x'),
          ),
          array(
            'name' => 'y',
            'type' => 'int',
            'description' => 'The y-index of the tile.',
            'default value' => 0,
            'source' => array('param' => 'y'),
          ),
          array(
            'name' => 'layers',
            'type' => 'string',
            'description' => 'The the comma-separated list of layers to return.',
            'default value' => '',
            'source' => array('param' => 'layers'),
          ),
          array(
            'name' => 'width',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Supply a width (number of tiles) if more than a single tile should be returned.',
            'default value' => 1,
            'source' => array('param' => 'layers'),
          ),
          array(
            'name' => 'height',
            'optional' => TRUE,
            'type' => 'int',
            'description' => 'Supply a height (number of tiles) if more than a single tile should be returned.',
            'default value' => 1,
            'source' => array('param' => 'layers'),
          ),
        ),
        'access arguments' => array('access content'),
      ),
    ),
  );
}

/**
 * Implementation of hook_nodeapi().
 */
function simplegeo_tileservice_nodeapi(&$node, $op, $a3) {
  $position = NULL;
  if ($op == 'insert') {
    if (isset($node->simple_geo_position)) {
      require_once('simplegeo_tileservice.inc');

      simplegeo_tileservice_clear_node_cache($node->type, $node->simple_geo_position);
    }
  }
  if ($op == 'presave') {
    if (isset($node->simple_geo_position)) {
      require_once('simplegeo_tileservice.inc');

      $old_node = node_load($node->nid);
      $old_position = $old_node->simple_geo_position;
      $new_position = $node->simple_geo_position;
      if ($old_position !== $new_position) {
        // Clear the both the old and new postion if they are specified.
        // E.g in the case of an already existing node which didn't have a
        // previous position we only clear the new postion.
        if (!empty($old_position)) {
          simplegeo_tileservice_clear_node_cache($node->type, $old_position);
        }
        if (!empty($new_position)) {
          simplegeo_tileservice_clear_node_cache($node->type, $new_position);
        }
      }
    }
  }
  if ($op == 'delete') {
    if (isset($node->simple_geo_position)) {
      require_once('simplegeo_tileservice.inc');
      simplegeo_tileservice_clear_node_cache($node->type, $node->simple_geo_position);
    }
  }
}
