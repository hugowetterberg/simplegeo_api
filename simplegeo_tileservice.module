<?php
// $Id$

/**
 * @file
 * Services support for Simple Geo data.
 */

require_once(drupal_get_path('module', 'simplegeo_tileservice') .'/gmaptile.php');

define('SIMPLEGEOTILES_OFFSET', 268435456);
define('SIMPLEGEOTILES_RADIUS', 85445659.4471); /* $offset / pi() */
define('SIMPLEGEOTILES_MAX_NODES', 20);
define('SIMPLEGEOTILES_MAX_ZOOM', 17);
define('SIMPLEGEOTILES_MIN_ZOOM', 7);
define('SIMPLEGEOTILES_MAX_NODES', 20);
define('SIMPLEGEOTILES_ALLOWED_BOUNDS', '58.0546319113729 7.239990234375,53.79416183737104 14.908447265625');

/*
 * Specifying layer properties.
 * Avaiable settings:
 *  nodetype  String. the node type name. Requeried
 *  title     String. Pretty title of the layer. Use t(). Required.
 *  checked   Binary. Whether the layer should be on be default.
 *  max_age   String. Specifies the maximum age of the node from the created
 *            date. E.g "2 days". Parsed with strtottime().
 *  joins     Array. Any extra JOINS that should be added to the query in
 *            _simplegeo_tileservice_get_nodes()
 *            E.g array('INNER JOIN {content_type_event} t ON n.vid = t.vid', ..., ...)
 *  wheres    Array. Any extra extra WHERE statements that should be added to
 *            the query in _simplegeo_tileservice_get_nodes(). Don't include
 *            "AND".
*/


/**
 * Returns all the layers in the tile service
 *
 * @return array
 */
function simplegeo_tileservice_get_layers() {
  static $layers;

  if (!$layers) {
    $layers = array();

    $modules = module_implements('simplegeo_tileservice_layers');
    foreach ($modules as $module) {
      call_user_func_array($module . '_simplegeo_tileservice_layers', array(&$layers));
    }

    drupal_alter('simplegeo_tileservice_layers', $layers);
  }

  return $layers;
}

/**
 * Returns all the layer types for the tile service
 *
 * @return array
 */
function simplegeo_tileservice_get_layer_types() {
  static $types;

  if (!$types) {
    $types = array();

    $modules = module_implements('simplegeo_tileservice_layer_types');
    foreach ($modules as $module) {
      $mtypes = call_user_func($module . '_simplegeo_tileservice_layer_types');
      if ($mtypes) {
        $types = array_merge($types, $mtypes);
      }
    }
    drupal_alter('simplegeo_tileservice_layer_types', $types);
  }

  return $types;
}

/**
 * Implementation of hook_simplegeo_tileservice_layer_types
 *
 * @return void
 */
function simplegeo_tileservice_simplegeo_tileservice_layers() {
  return array(
    'nodes' => array(
      'type' => 'node_sql',
      'title' => t('Nodes'),
      'active' => TRUE,
    ),
  );
}

/**
 * Implementation of hook_simplegeo_tileservice_layers
 *
 * @return void
 */
function simplegeo_tileservice_simplegeo_tileservice_layer_types() {
  return array(
    'node_sql' => array(
      'callback' => '_simplegeo_tileservice_get_nodes',
    ),
  );
}

function simplegeo_tileservice_menu() {
  $menu = array();
  // simplegeo/tiles/13/0-0/3-3/news-smileys
  $menu['simplegeo/tiles/%/%/%/%'] = array(
      'page callback' => '_simplegeo_tileservice_serve_tiles',
      'page arguments' => array(2, 3, 4, 5),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $menu['simplegeo/cache/clear'] = array(
      'page callback' => '_simplegeo_tileservice_clear_all_cache',
      'access arguments' => array('administer site configuration'),
      'type' => MENU_CALLBACK,
  );
  return $menu;
}

function _simplegeo_tileservice_serve_tiles($zoom, $from, $to, $layers) {

  // TODO: Implement allowed bounds and zoom check! /Anders
  $allowed_bounds = simple_geo_coordinates_to_array(variable_get('simplegeo_tileservice_allowed_bounds', SIMPLEGEOTILES_ALLOWED_BOUNDS));
  $max_zomm = variable_get('simplegeo_tileservice_max_zoom', SIMPLEGEOTILES_ALLOWED_BOUNDS);
  $min_zoom = variable_get('simplegeo_tileservice_min_zom', SIMPLEGEOTILES_ALLOWED_BOUNDS);

  $json = array();

  $layerdef = simplegeo_tileservice_get_layers();

  list($fromx, $fromy) = preg_split('/-/', $from);
  list($tox, $toy) = preg_split('/-/', $to);

  $layers = preg_split('/-/', $layers);

  $layer_result = array();

  foreach ($layers as $layer) {
    $tiles_result = array();
    $layerdef_layer = $layerdef[$layer];
    $type = $layerdef_layer['nodetype'];

    if (isset($type)) {
      for ($y = $fromy; $y <= $toy; $y++) {
        for ($x = $fromx; $x <= $tox; $x++) {
          $data = simplegeo_tileservice_read_cache($x, $y, $zoom, $layer);
          if (!$data) {
            $data = _simplegeo_tileservice_get_cluster($x, $y, $zoom, $layerdef_layer);
            simplegeo_tileservice_write_cache($x, $y, $zoom, $layer, $data);
          }
          if (!empty($data)) {
            $tiles_result[] = $data;
          }
        }
      }
    }

    $json[] =  $layer .':['. join(",", $tiles_result) .']';
  }

  print '{'. join(",", $json) .'}';
  exit;
}

/**
 * Implementation of hook_nodeapi().
 */
function simplegeo_tileservice_nodeapi(&$node, $op, $a3) {
  $position = NULL;
  if ($op == 'insert') {
    if (isset($node->simple_geo_position)) {
      simplegeo_tileservice_clear_node_cache($node->type, $node->simple_geo_position);
    }
  }
  if ($op == 'presave') {
    if (isset($node->simple_geo_position)) {
      $old_node = node_load($node->nid);
      $old_position = $old_node->simple_geo_position;
      $new_position = $node->simple_geo_position;
      if ($old_position !== $new_position) {
        // Clear the both the old and new postion if they are specified.
        // E.g in the case of an already existing node which didn't have a
        // previous position we only clear the new postion.
        if (!empty($old_position)) {
          simplegeo_tileservice_clear_node_cache($node->type, $old_position);
        }
        if (!empty($new_position)) {
          simplegeo_tileservice_clear_node_cache($node->type, $new_position);
        }
      }
    }
  }
  if ($op == 'delete') {
    if (isset($node->simple_geo_position)) {
      simplegeo_tileservice_clear_node_cache($node->type, $node->simple_geo_position);
    }
  }
}

function simplegeo_tileservice_read_cache($x, $y, $zoom, $layer) {
  $sql =  "SELECT data FROM {simplegeo_tileservice_tilecache}
    WHERE x = %d AND y = %d AND zoom = %d AND layer = '%s'";

  $res = db_query($sql, $x, $y, $zoom, $layer);
  if ($obj = db_fetch_object($res)) {
    return $obj->data;
  }

  return NULL;
}

function simplegeo_tileservice_write_cache($x, $y, $zoom, $layer, $data) {
  $cache_row = db_result(db_query("SELECT COUNT(x) FROM {simplegeo_tileservice_tilecache}
    WHERE x = %d AND y = %d AND zoom = %d AND layer = '%s'", $x, $y, $zoom, $layer));

  if ($cache_row) {
    $sql =  "UPDATE {simplegeo_tileservice_tilecache}
      SET data = '%s'
      WHERE x = %d AND y = %d AND zoom = %d AND layer = '%s'";
    return db_query($sql, $data, $x, $y, $zoom, $layer);
  }
  else {
    $sql =  "INSERT INTO {simplegeo_tileservice_tilecache} (x,y, zoom, layer, data)
      VALUES (%d, %d, %d, '%s', '%s')";
    return db_query($sql, $x, $y, $zoom, $layer, $data);
  }
}

function simplegeo_tileservice_clear_cache($x, $y, $zoom, $layer) {
  $sql =  "DELETE FROM {simplegeo_tileservice_tilecache}
    WHERE x = %d AND y = %d AND zoom = %d AND layer = '%s'";

  return db_query($sql, $x, $y, $zoom, $layer);
}

function simplegeo_tileservice_clear_node_cache($type, $position) {
  $layerdef = simplegeo_tileservice_get_layers();

  foreach ($layerdef as $layer => $layer_info ) {
    if ($layer_info['nodetype'] == $type) {
      // Clear the cache for all zoom levels (we currently use 7-17);
      for ($zoom=7; $zoom <= 17; $zoom++) {
        $coords = _simplegeo_tileservice_coord2tile($position, $zoom);
        simplegeo_tileservice_clear_cache($coords->x, $coords->y, $zoom, $layer);
      }
    }
  }
}

function _simplegeo_tileservice_tile2coord($x, $y, $zoom) {
  $gmaptile = GMapTile::fromTileCoord($x, $y, $zoom);

  return array('lat' => $gmaptile->getLat(), 'long' => $gmaptile->getLong());
}
function _simplegeo_tileservice_coord2tile($coords, $zoom) {
  // Switch zoom level (gmaptile users the old 17-0 levels instead of 0-17) TODO: fix this in gmaptile.php
  $zoom = 17 - $zoom;
  $point = simple_geo_coordinates_to_array($coords);
  $tile = new GMapTile($point[0], $point[1], $zoom);
  return $tile->getTileCoord();
}

function _simplegeo_tileservice_get_cluster($x, $y, $zoom, $layer) {
  $data = _simplegeo_tileservice_get_nodes($x, $y, $zoom, $layer);
  if (!empty($data)) {
    // Specifie the max distance between markers to cluster on
    $distance = 50;
    $cluster = _simplegeo_tileservice_cluster($data, 50, $zoom);
    return json_encode($cluster);
  }
  return NULL;
}

function _simplegeo_tileservice_get_nodes($x, $y, $zoom, $layer) {
  // Switch zoom level (gmaptile users the old 17-0 levels instead of 0-17) TODO: fix this in gmaptile.php
  $zoom = 17 - $zoom;
  $top_left = _simplegeo_tileservice_tile2coord($x, $y, $zoom);
  $bottom_right = _simplegeo_tileservice_tile2coord($x+1, $y+1, $zoom);

  // Build the query.
  $sql = "SELECT n.type, n.nid, AsText(ps.position) AS position
          FROM {node} n
          INNER JOIN {simple_geo_position} ps ON n.nid = ps.nid AND ps.type = 'node' ";

  if(isset($layer['joins'])) {
    $sql .=  implode($layer['joins'], ' ');
  }

  // Define the WHERE part of the query. We first define some defaults.
  $wheres = array(
    "n.type = '%s'",
    'n.status <> 0',
    "Contains(Envelope(GeomFromText('LineString(%s %s,%s %s)')), ps.position)",
  );

  // Add any WHEREs defined in the layer definition.
  if (is_array($layer['wheres'])) {
    $wheres = array_merge($layer['wheres'], $wheres);
  }

  // If max age is defined check so the node isn't older than the specified age.
  if (isset($layer['max_age'])) {
    $wheres[] = 'n.created >= ' . strtotime('-' . $layer['max_age']);
  }

  // Add the WHEREs to the query.
  $sql .= ' WHERE ' . implode($wheres, ' AND ');

  $sql .= " ORDER BY n.created";

  $params = array($layer['nodetype'], $top_left['lat'], $top_left['long'], $bottom_right['lat'], $bottom_right['long']);

  $res = db_query($sql, $params);

  $nodes = array();

  while ($node = db_fetch_object($res)) {
    $point = explode(' ', simple_geo_clean_wkt('point', $node->position));
    $nodes[] = array('lat' => (float)$point[0], 'lon' => (float)$point[1], 'count' => 1, 'nid' => (int)$node->nid);

  }
  return $nodes;

}

function simplegeo_tileservice_lon_to_x($lon) {
  return round(SIMPLEGEOTILES_OFFSET + SIMPLEGEOTILES_RADIUS * $lon * pi() / 180);
}

function simplegeo_tileservice_lat_to_y($lat) {
  return round(SIMPLEGEOTILES_OFFSET - SIMPLEGEOTILES_RADIUS *
    log((1 + sin($lat * pi() / 180)) /
    (1 - sin($lat * pi() / 180))) / 2);
}

function simplegeo_tileservice_pixel_distance($lat1, $lon1, $lat2, $lon2, $zoom) {
  $x1 = simplegeo_tileservice_lon_to_x($lon1);
  $y1 = simplegeo_tileservice_lat_to_y($lat1);

  $x2 = simplegeo_tileservice_lon_to_x($lon2);
  $y2 = simplegeo_tileservice_lat_to_y($lat2);

  // Love the use of bitwise op here. A bitwise shift by one doubles a value
  // and that's the principle behind gmaps zoom levels. Each zoom-level divides
  // the each tile into four tiles, thus providing tiles with half the width
  // and height and one fourth of the area.
  return sqrt(pow(($x1-$x2), 2) + pow(($y1-$y2), 2)) >> (21 - $zoom);
}

function  _simplegeo_tileservice_cluster($markers, $distance, $zoom) {
  $clustered = array();
  /* Loop until all markers have been compared. */
  while (count($markers)) {
    $marker  = array_pop($markers);
    $cluster = array();

    /* Compare against all markers which are left. */
    foreach ($markers as $key => $target) {
      $pixels = simplegeo_tileservice_pixel_distance($marker['lat'], $marker['lon'],
        $target['lat'], $target['lon'],
        $zoom);
      /* If two markers are closer than given distance remove */
      /* target marker from array and add it to cluster.      */
      if ($distance > $pixels) {
        unset($markers[$key]);
        $cluster[] = $target;
      }
    }

    /* If a marker has been added to cluster, add also the one  */
    /* we were comparing to and remove the original from array. */
    if (count($cluster) > 0) {
      $cluster[] = $marker;
      $clustered[] = _simplegeo_tileservice_prepare_cluster($cluster);
    }
    else {
      $marker['nid'] = array($marker['nid']);
      $clustered[] = $marker;
    }
  }
  return $clustered;
}

function _simplegeo_tileservice_prepare_cluster($cluster) {
  // Save the postion from the first marker to have something to compare against
  $min_lat = $cluster[0]['lat'];
  $min_lon = $cluster[0]['lon'];
  $max_lat = $cluster[0]['lat'];
  $max_lon = $cluster[0]['lon'];
  $i = 0;
  $max_nodes = variable_get('simplegeo_tileservice_max_nodes', SIMPLEGEOTILES_MAX_NODES);
  $nids = array();

  foreach ($cluster as $marker) {
    if ($marker['lat'] < $min_lat) {
      $min_lat = $marker['lat'];
    }
    else if ($marker['lat'] > $max_lat) {
      $max_lat = $marker['lat'];
    }

    if ($marker['lon'] < $min_lon) {
      $min_lon = $marker['lon'];
    }
    else if ($marker['lon'] > $max_lon) {
      $max_lon = $marker['lon'];
    }
    // Only save the nodes ids up to max;
    if ($i < $max_nodes) {
      $nids[] = $marker['nid'];
    }
    $i++;
  }
  // Calculate center of cluster
  $center_lat = ($max_lat + $min_lat) / 2;
  $center_lon = ($max_lon + $min_lon) / 2;

  return array('lat' => $center_lat, 'lon' => $center_lon, 'count' => count($cluster), 'nid' => $nids, 'NW' => array($max_lat, $min_lon), 'SE' => array($min_lat, $max_lon));
}

function _simplegeo_tileservice_clear_all_cache($redirect = TRUE) {
  db_query("DELETE FROM {simplegeo_tileservice_tilecache}");
  if ($redirect) {
    drupal_goto('');
  }
}