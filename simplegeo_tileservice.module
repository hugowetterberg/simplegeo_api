<?php
// $Id$

/**
 * @file
 * Services support for Simple Geo data.
 */

/*
 * Specifying layer properties.
 * Avaiable settings:
 *  nodetype  String. the node type name. Requeried
 *  title     String. Pretty title of the layer. Use t(). Required.
 *  checked   Binary. Whether the layer should be on be default.
 *  max_age   String. Specifies the maximum age of the node from the created
 *            date. E.g "2 days". Parsed with strtottime().
 *  joins     Array. Any extra JOINS that should be added to the query in
 *            _simplegeo_tileservice_get_nodes()
 *            E.g array('INNER JOIN {content_type_event} t ON n.vid = t.vid', ..., ...)
 *  wheres    Array. Any extra extra WHERE statements that should be added to
 *            the query in _simplegeo_tileservice_get_nodes(). Don't include
 *            "AND".
*/


/**
 * Returns all the layers in the tile service
 *
 * @return array
 */
function simplegeo_tileservice_get_layers() {
  static $layers;

  if (!$layers) {
    $layers = array();

    $modules = module_implements('simplegeo_tileservice_layers');
    foreach ($modules as $module) {
      call_user_func_array($module . '_simplegeo_tileservice_layers', array(&$layers));
    }

    drupal_alter('simplegeo_tileservice_layers', $layers);
  }

  return $layers;
}

/**
 * Returns all the layer types for the tile service
 *
 * @return array
 */
function simplegeo_tileservice_get_layer_types() {
  static $types;

  if (!$types) {
    $types = array();

    $modules = module_implements('simplegeo_tileservice_layer_types');
    foreach ($modules as $module) {
      $mtypes = call_user_func($module . '_simplegeo_tileservice_layer_types');
      if ($mtypes) {
        $types = array_merge($types, $mtypes);
      }
    }
    drupal_alter('simplegeo_tileservice_layer_types', $types);
  }

  return $types;
}

/**
 * Implementation of hook_simplegeo_tileservice_layer_types
 *
 * @return void
 */
function simplegeo_tileservice_simplegeo_tileservice_layers() {
  return array(
    'nodes' => array(
      'type' => 'node_sql',
      'title' => t('Nodes'),
      'active' => TRUE,
    ),
  );
}

/**
 * Implementation of hook_simplegeo_tileservice_layers
 *
 * @return void
 */
function simplegeo_tileservice_simplegeo_tileservice_layer_types() {
  return array(
    'node_sql' => array(
      'callback' => '_simplegeo_tileservice_get_nodes',
    ),
  );
}

function simplegeo_tileservice_menu() {
  $menu = array();
  // simplegeo/tiles/13/0-0/3-3/news-smileys
  $menu['simplegeo/tiles/%/%/%/%'] = array(
      'file' => 'simplegeo_tileservice.inc',
      'page callback' => '_simplegeo_tileservice_serve_tiles',
      'page arguments' => array(2, 3, 4, 5),
      'access arguments' => array('access content'),
      'type' => MENU_CALLBACK,
  );
  $menu['simplegeo/cache/clear'] = array(
      'file' => 'simplegeo_tileservice.inc',
      'page callback' => '_simplegeo_tileservice_clear_all_cache',
      'access arguments' => array('administer site configuration'),
      'type' => MENU_CALLBACK,
  );
  return $menu;
}

/**
 * Implementation of hook_nodeapi().
 */
function simplegeo_tileservice_nodeapi(&$node, $op, $a3) {
  $position = NULL;
  if ($op == 'insert') {
    if (isset($node->simple_geo_position)) {
      require_once('simplegeo_tileservice.inc');

      simplegeo_tileservice_clear_node_cache($node->type, $node->simple_geo_position);
    }
  }
  if ($op == 'presave') {
    if (isset($node->simple_geo_position)) {
      require_once('simplegeo_tileservice.inc');

      $old_node = node_load($node->nid);
      $old_position = $old_node->simple_geo_position;
      $new_position = $node->simple_geo_position;
      if ($old_position !== $new_position) {
        // Clear the both the old and new postion if they are specified.
        // E.g in the case of an already existing node which didn't have a
        // previous position we only clear the new postion.
        if (!empty($old_position)) {
          simplegeo_tileservice_clear_node_cache($node->type, $old_position);
        }
        if (!empty($new_position)) {
          simplegeo_tileservice_clear_node_cache($node->type, $new_position);
        }
      }
    }
  }
  if ($op == 'delete') {
    if (isset($node->simple_geo_position)) {
      simplegeo_tileservice_clear_node_cache($node->type, $node->simple_geo_position);
    }
  }
}
